<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Efficient Estimation of Word Representation in Vector Space]]></title>
    <url>%2F2018%2F07%2F24%2FEfficient-Estimation-of-Word-Representation-in-Vector-Space%2F</url>
    <content type="text"><![CDATA[Abstract本文提出两个新颖的模型，能够在更少的训练时间里对更多的语料库进行训练，同时所得到的词向量在词语的语法相似度任务以及语义相似度任务的度量中取得了state-of-the-art的结果 Introduction之前的一些NLP系统，将利用词袋模型表示数据，这种考虑方式没有考虑到词之间的相似性。这种方法在数据集充足的时候很有效，但是对于数据集很小的情况，效果不好。 本文的目标是介绍一个技术能够在很大数据集上快速的学习到质量很好的词向量。 Model Architecture本文采用度量模型计算复杂度的方式是由完全训练整个模型所需的参数数目决定。对于所有的模型，其计算复杂度可表示成如下公式：$$O = E \times T \times Q$$其中E是指训练的epoch数目，T是指训练集的词的数目，Q是每个模型进行一次训练的复杂度。不同的模型它的取值就不同。 前馈神经网络语言模型模型由Project Layer(根据索引表示得到向量表示)，隐藏层和输出层，其Q的计算公式如下：$${\rm{Q}} = N \times D + N \times D \times H + H \times V$$其中$N \times D$表示的是其输入经过lookup table操作后变成一个$N \times D$的矩阵，其中N是指输入的长度，D表示词向量的维度。$N\times D \times H$表示将词向量表示的数据转换成隐藏表示的时间复杂度。最后是将隐层表示转换成词汇表上各个词语的概率的时间复杂度。V即表示词汇表的大小。如果不对公式的最后一项$H \times V$进行处理，则上述的时间复杂度将由该项主导，因为V的取值远远大于N，H和D。但是我们可以通过使用层次softmax或者避免对词概率进行整个词汇表的softmax，从而降低第3项的大小。通过层次softmax可将第3项的计算复杂度降到$H \times {\log _2}V$，从而整个Q的计算复杂度将由第2项主导。本文的修改将会去掉隐藏层，所以这个第2项将会去除掉，从而显著的提高训练速度 循环神经网络语言模型循环神经网络语言模型客服了前馈神经网络语言模型的一些缺点。如： 不需要指定输入上下文的长度N RNN比浅层的前馈神经网络具有更强的表达能力 网络只包括一个RNN层和一个输出层，其Q表示如下：$$Q=H \times H + H\times V$$其中H表示RNN隐层大小也是词向量大小。同样通过层次softmax操作，可以使得最后一项变为$H \times {log_2}V$。以上Q公式是论文里的，我觉得第一项还是需要添加对应的上下文的长度T。因为RNN里由$h_t = tanh(W(h_{t-1};x_t))$,而这个操作的时间复杂度已经是$H \times H$了，所以对长度为T的序列的时间复杂度应该是$T \times H \times H$。 New Log-linear ModelsContinuous Bag-of-Words Model即是将前馈神经网络语言模型去除hidden层的模型，Skip-gram模型是用中心词预测其上下文词的模型。两者的模型图如下： 对于skip-gram模型增加窗口尺寸c，可以使得模型训练得到的词向量更好，但是会增加模型的计算复杂度 Result之前有论文指出词语直接有着多种不同的相似性。我们发现当我们在大量的数据上训练高纬词向量时，我们得到的词向量可以用来回答表达词语之间微妙的语义关系的问题。通过实验发现，到了一定的数据量和维度后单独增加这两个数值，对于词向量的质量不再有提高。要同时增加这两个数值才能提高质量增加训练数据 NNLM结果要比RNNLM结果好，因为RNNLM中没有project layer CBOW的效果与NNLM在语义任务上相似，但是在语法任务上的效果要好些 Skip-gram的语法任务效果比CBOW稍微差点，但是语义任务效果最好 使用两倍的数据训练一轮得到的词向量的效果与用一倍数据集训练三轮的效果一样]]></content>
  </entry>
  <entry>
    <title><![CDATA[配置hexo的mathjax、评论以及访问统计]]></title>
    <url>%2F2018%2F07%2F23%2F%E9%85%8D%E7%BD%AEhexo%E7%9A%84mathjax%E3%80%81%E8%AF%84%E8%AE%BA%E4%BB%A5%E5%8F%8A%E8%AE%BF%E9%97%AE%E7%BB%9F%E8%AE%A1%2F</url>
    <content type="text"><![CDATA[1. 使用Kramed代替 Marked在工程目录下(即hexo init执行的那个目录下)执行以下命令安装Kramed12npm uninstall hexo-renderer-marked --savenpm install hexo-renderer-kramed --save 然后将/node_modules/hexo-renderer-kramed/lib/renderer.js中的内容按如下方式修改：1234567891011更改前：// Change inline math rulefunction formatText(text) &#123; // Fit kramed&apos;s rule: $$ + \1 + $$ return text.replace(/`\$(.*?)\$`/g, &apos;$$$$$1$$$$&apos;);&#125;更改后：// Change inline math rulefunction formatText(text) &#123; return text;&#125; 2. 停止使用hexo-math,安装 hexo-renderer-mathjax命令如下：12npm uninstall hexo-math --savenpm install hexo-renderer-mathjax --save 3. 更新 Mathjax 的 CDN 链接将/node_modules/hexo-renderer-mathjax/mathjax.html中的CDN链接更改为下面的链接1&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-MML-AM_CHTML&quot;&gt;&lt;/script&gt; 4. 修改hexo的默认转义规则打开/nodes_modules/marked/lib/marked.js文件对其进行如下几项修改1234567更改前escape: /^\\([\\`*&#123;&#125;\[\]()#$+\-.!_&gt;])/,em: /^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,更改后：escape: /^\\([`*\[\]()# +\-.!_&gt;])/,em: /^\*((?:\*\*|[\s\S])+?)\*(?!\*)/, 5. 开启mathjax在主题的_config.yml中添加(如果不存在)或修改(如果存在)mathjax配置12mathjax: enable: true 6. 安装next主题并配置Next.Mist在项目根目录执行如下git命令，安装Next主题123git clone https://github.com/iissnan/hexo-theme-next themes/nextcd themes/nextgit pull 在根目录的_config.yml更改主题配置1theme: next 在themes/next下的_config.yml更改Mist配置1234将scheme: Muse更改为scheme: Mist 7. 网站底部加上访问量(使用busuanzi)在themes/next里的_config.yml将busuanzi的统计打开123busuanzi_count: # count values only if the other configs are false enable: true 8.配置评论(使用Valine和Leancloud)首先注册Leanclout账号注册链接，创建一个应用，并获取其appkey和appid然后修改themes/next下的_config.yml的对应配置1234valine: enable: true appid: # your leancloud application appid appkey: # your leancloud application appkey 9.开启分享功能(baidushare)编辑themes/next下的_config.yml12baidushare: type: button 10. 与github链接首先将电脑的ssh公钥加入到github账号中，然后配置项目根目录下的_config.yml1234deploy: type: git repository: git@github.com:usrname/username.github.io.git branch: master 11. 配置搜索功能在项目根目录执行如下命令安装相应组件1npm install hexo-generator-searchdb --save 修改站点配置文件，添加如下配置12345search: path: search.xml field: post format: html limit: 10000 修改主题配置文件12local_search: enable: true]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F07%2F23%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
